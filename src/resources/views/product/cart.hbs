<section class="h-100 gradient-custom">
    <div class="container py-5 mt-3">
      <div class="row d-flex justify-content-center my-4">
        <div class="col-md-8">
          <div class="card mb-4">
            <div class="card-header py-3">
              <h5 class="mb-0">Cart</h5>
            </div>
            <div class="mt-3 ms-3">
            <a href="/product/orderManagement/{{session.idUser}}">Order management</a>
          </div>
            <div class="form-check mt-4 ms-5">
              <input class="form-check-input" type="checkbox" value="" id="checkbox-all">
              <label class="form-check-label" for="checkbox-all">
                Select all 
              </label>
              <button type="submit" id="deleteItemChecked" class="btn btn-primary btn-sm me-1 mb-2" 
              data-bs-toggle="modal" data-bs-target="#delete-product-modal" disabled >
                <i class="bi bi-trash3"></i>
              </button>
              <button type="submit" id="buyItemChecked" class="btn btn-danger btn-sm mb-2 btnInteractionCart" value="buy" disabled
                title="Move to the wish list">
                <i class="bi bi-bag-fill"></i>
              </button>
            </div>
            <hr class="my-4" >
            <div class="card-body">
              <!-- Single item -->
              {{#each cart}}
              <div class="row mx-2 cart-item" data-can-buy="{{this.enable}}">
                <div class="col-lg-3 col-md-12 mb-4 mb-lg-0 ">
                  <input class="form-check-input " id="{{this._id}}" name="cartIds" type="checkbox" value="{{this._id}}" >
                  <!-- Image -->
                  <div class="bg-image hover-overlay hover-zoom ripple rounded" data-mdb-ripple-color="light">
                    <img src="{{this.image}}"
                      class="w-100" alt="{{this.name}}" />
                    <a href="#!">
                      <div class="mask" style="background-color: rgba(251, 251, 251, 0.2)"></div>
                    </a>
                  </div>
                  <!-- Image -->
                </div>
                <div class="col-lg-5 col-md-6 mb-4 mb-lg-0">
                  <!-- Data -->
                  <strong for="{{this._id}}">{{this.name}}</strong>
                  <p>{{this.description}}</p>
                  <p>Unit price: ${{this.price}}</p>
                  <button type="button"  class="btn btn-primary btn-sm me-1 mb-2 btnInteractionCart" data-mdb-toggle="tooltip"
                  data-id="{{this._id}}"
                  data-bs-toggle="modal" data-bs-target="#delete-single-modal" 
                    title="Remove item" value="delete">
                    <i class="bi bi-trash3"></i>
                  </button>
                  <button type="button" class="btn btn-danger btn-sm mb-2 me-1 btnInteractionCart" data-mdb-toggle="tooltip"
                  data-id="{{this._id}}" value="like"
                    title="Move to the wish list">
                    <i class="bi bi-suit-heart"></i>
                  </button>
                  <!-- Data -->
                </div>
                <div class="col-lg-4 col-md-6 mb-4 mb-lg-0">
                  <!-- Quantity -->
                  <div class="d-flex mb-4" style="max-width: 300px">
                    <button class="btn btn-primary px-3 me-2 btn-cart"
                      onclick="this.parentNode.querySelector('input[type=number]').stepDown()">
                      <i class="bi bi-dash-circle-fill"></i>
                    </button>
                    <!-- Quantity -->
                    <div class="form-outline">
                      <input min="0" name="quantity" value="{{this.quantityToBuy}}" 
                      type="number" onchange="updateInputValue(this)"
                      class="form-control quantityToBuy" for="{{this._id}}" />
                      <label class="form-label" for="form1">Quantity</label>
                    </div>
                    <button class="btn btn-primary px-3 ms-2 btn-cart"
                      onclick="this.parentNode.querySelector('input[type=number]').stepUp()">
                      <i class="bi bi-plus-circle-fill"></i>
                    </button>
                  </div>                        
                </div>
              </div>      
              <hr class="my-4" >
              {{/each }}
              <!-- Payment methods -->
            </div>
          </div>
          <div class="card mb-4">
            <div class="card-body">
              <p><strong>Expected shipping delivery</strong></p>
              <p class="mb-0">12.10.2020 - 14.10.2020</p>
            </div>
          </div>
          <div class="card mb-4 mb-lg-0">
            <div class="card-body">
              <p><strong>We accept</strong></p>
              <img class="me-2" width="45px"
                src="https://mdbcdn.b-cdn.net/wp-content/plugins/woocommerce-gateway-stripe/assets/images/visa.svg"
                alt="Visa" />
              <img class="me-2" width="45px"
                src="https://mdbcdn.b-cdn.net/wp-content/plugins/woocommerce-gateway-stripe/assets/images/amex.svg"
                alt="American Express" />
              <img class="me-2" width="45px"
                src="https://mdbcdn.b-cdn.net/wp-content/plugins/woocommerce-gateway-stripe/assets/images/mastercard.svg"
                alt="Mastercard" />
              <i class="bi bi-paypal"></i>
            </div>
          </div>
        </div>
        <div class="col-md-4">
          <div class="card mb-4">
            <div class="card-header py-3">
              <h5 class="mb-0">Summary</h5>
            </div>
            <div class="card-body">
              <ul class="list-group list-group-flush">
                <div id ="listNameProduct" class="my-3"></div>
              </ul>
              <button type="submit" id="checkoutSubmitBtn" class="btn btn-primary btn-lg btn-block" disabled>
                Go to checkout
              </button>
            </div>
          </div>
        </div>
      </div>
    </div>
</section>
<form name="Cart-Form" method="POSt"></form>
{{!-- Delete-Modal --}}
<div class="modal fade" id="delete-product-modal" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="exampleModalLabel">Delete product</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"
        ></button>
      </div>
      <div class="modal-body">
        Are you sure you want to delete this product?
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
        <button id="deleteProductBtn" type="button" class="btn btn-danger">Delete</button>
      </div>
    </div>
  </div>
</div>
{{!-- Delete-Single-Item-Modal --}}
<div class="modal fade" id="delete-single-modal" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="exampleModalLabel">Delete single product</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"
        ></button>
      </div>
      <div class="modal-body">
        Are you sure you want to delete this product?
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
        <button id="deleteSingleProductBtn" type="button" class="btn btn-danger">Delete</button>
      </div>
    </div>
  </div>
</div>
<script>
  document.addEventListener('DOMContentLoaded', function(){
    const CartForm = document.forms['Cart-Form'];
    let CartIds
    let type
    let quantityValue =[]
    let listNameProduct = $('#listNameProduct')
    let checkboxAll = $('#checkbox-all')
    let allQuantityVal = $('input[name="quantity"]')
    let deleteModalBtn = $('#deleteProductBtn')
    let deleteSingleModalBtn = $('#deleteSingleProductBtn')
    let deleteItemChecked = $('#deleteItemChecked')
    let buyItemChecked = $('#buyItemChecked')
    let checkoutFromCart = $('#checkoutSubmitBtn')
    let cartItemCheckbox = $('input[name="cartIds"]')
    let buttons = document.querySelectorAll('.btnInteractionCart');
    document.querySelectorAll('.cart-item').forEach(function(item) {
      // Get the value of the attribute 'data-can-buy'
      let canBuy = item.getAttribute('data-can-buy');
      //If 'data-can-buy' value is 'false', disable the element
      if (canBuy === 'false') {
          item.querySelectorAll(':not(.btnInteractionCart)').forEach(function(element) {
              element.disabled = true; // Disable input and button elements
          });
        }
      });
      // Click event handler function
      function handleClick(event) {
          // Go up to the parent level to find the element <button>
        var button = event.target;
        while (button && button.tagName !== 'BUTTON') {
            button = button.parentNode;
        }
        if (button) {
          // Get the value of the value attribute from the element <button>
          type = button.value;
          CartIds = button.getAttribute('data-id')
          switch(type){
            case 'delete':
              break;
            case 'like':
              CartForm.method ='POST'
              CartForm.action = '/product/cart/' + type + '/' + CartIds;
              CartForm.submit();
              break;
          }
        }  
      }
      // Add click event for each button
      buttons.forEach(function(button) {
          button.addEventListener('click', handleClick);
      });
      //Handle when confirming deletion of selected item
      deleteModalBtn.click(function(event){
        getIdCarts()
        CartForm.action = '/product/cart/' + CartIds + '/?_method=DELETE';
        CartForm.submit();
      })
      //Handle when confirming deletion of a product
      deleteSingleModalBtn.click(function(event){
        CartForm.action = '/product/cart/' + CartIds + '/?_method=DELETE';
        CartForm.submit();
      })
      //Handled when the checkboxAll button is pressed
      checkboxAll.change(function(){
        var isChecked = $(this).prop('checked')
        cartItemCheckbox.not(':disabled').prop('checked', isChecked).trigger('change')    
        renderCheckAllSubmit()
      })
      //Handled when cartItemCheckbox are clicked
      cartItemCheckbox.change(function(){
        var isChecked = cartItemCheckbox.not(':disabled').length === cartItemCheckbox.filter(':checked').length
        checkboxAll.prop('checked', isChecked)
        renderCheckAllSubmit()
        getNameProduct()
          .then(nameProducts => {
            renderProductSelected(nameProducts)
          })
          .catch(error => {
            console.error('Error:', error);
          });
      })
        checkoutFromCart.click(function(e){
        getIdCarts()
        cartItemCheckbox.each(function(){
          if ($(this).is(':checked')) {
            // Get the value of the corresponding quantity field
            let value = $('input.quantityToBuy[for="' + $(this).attr('id') + '"]').val()
            quantityValue.push(value)
            }
        })
        CartForm.method = 'GET'
        CartForm.action = '/product/cart/checkout/' + CartIds + '/' + quantityValue;
        CartForm.submit();
      })
    //Get the checked product name
    function getNameProduct() {
        return new Promise((resolve, reject) => {
            let nameProducts = [];
            cartItemCheckbox.each(function() {
                if ($(this).is(':checked')) {
                    // Get the value of the corresponding quantity field
                    let productName = $('strong[for="' + $(this).attr('id') + '"]').text();
                    nameProducts.push(productName);
                }
            });
            if (nameProducts) {
                resolve(nameProducts); // Return name product
            } else {
                reject('Error'); // Returns an error if no products are selected
            }
        });
    }
    function renderProductSelected(nameProducts){
      console.log(nameProducts)
      let renderNameProduct = nameProducts.map(function(nameProduct){
        return `
          <li
            class="list-group-item d-flex justify-content-between align-items-center border-0 px-0 pb-0">
            Products
            <span>${nameProduct}</span>
          </li>
        `
      })
      listNameProduct.html(renderNameProduct.join(''));
    }
      // Render delete and buy checked button 
      function renderCheckAllSubmit (){
        var isChecked = $('input[name="cartIds"]:checked').length
        if(isChecked ){
          deleteItemChecked.attr('disabled', false)
          buyItemChecked.attr('disabled', false)
          checkoutFromCart.attr('disabled', false)
        } else {
          deleteItemChecked.attr('disabled', true)
          buyItemChecked.attr('disabled', true)
          checkoutFromCart.attr('disabled', true)
        }
      };
      //Get the checked product id
      function getIdCarts(){
        CartIds = cartItemCheckbox.filter(':checked').map(function() {
            return $(this).val();
        }).get();
      }

  }
  )
</script>